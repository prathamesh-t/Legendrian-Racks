% Saved by Prover9-Mace4 Version 0.5, December 2007.

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  assign(max_weight, 25).
  set(restrict_denials).
  assign(new_constants, 1).
  assign(max_seconds, 60).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

formulas(assumptions).

% Distributivity from a nonstandard Boolean algebra (BA) basis.

% Prover9 should produce a proof in a few seconds.

% Nonstandard Boolean algebra basis.
% Rack Axioms

all x (pow8 (x) = (((((((x * x) * x) * x) * x) * x) * x) * x)).

all x all y all z ((x*y)*z = (x*z)*(y*z)).
all x all y ((x@y) * y = x).
all x all y ((x*y)@y = x).

all x (x = pow8 (x)).

all x all y (U(x, y)<-> (y = (((x*x)*x)*x))).
all x all y (D(x, y)<-> (y = (((x*x)*x)*x))).

all x (pow (x) = (((x*x)*x)*x)*x).
all x (negpow (x) = (((x@x)@x)@x)@x).
%all x (g (x) = (x@x)).
%all x (f (x) = (x * x)).
%all x ((g (g (g (x)))) = ( f (f (f (x))) * x)).
%all x (U(x,((((x@x)@(x@x))@(x@x))@x))). 
%all x (D(((((x@x)@(x@x))@(x@x))@x, x@x))).

%(f (f (f (x))) * x = (g (g (x)))@(g (x))).
%g (x) = f (f (f ( (((g (g (x))) @ (g(x))) @x)))).

%all x (g (x) = (x@x)).
%all x (x = (f (f (f (f (f (f (x)))))))*x).
%all y (y = (g (g (g (g (g (g (y)))))))@y).
%all x all y (U(x, y)<-> (y = (g (g (g (x)))))).
%all y (y = (g (g (g (g (g (g (y)))))))*y).

%all x ((((x*x)*x)*x) =  ((((x@x)@x)@x)@x)).

end_of_list.

formulas(goals).

%((((x@x)@(x@x))@(x@x))@x) = ((((x@x)@x)@x)@x).
%( f (f (f (x))) = (((x*x)*x)*x)).

%a = b.
%all x ( f (f (f (x))) = ((((x@x)@(x@x))@(x@x))@x)).
%y = (g (g (g (g (g (g (y)))))))@y.
%(g (g (g (x)))) =  (((x@x)@(x@x))@(x@x)).
%LR1-A
%all x all y all z ((U(x*z, y) & D(y, z))  -> (z = x)).
%all x all y all z ((U(x*z, y) & D(y, z))  -> (y = ((((x *x) * (x *x)) * (x * x)) * x))).

%LR1-B
%all x all y all z ((D(y, z@x) & U(x, y))  -> (x = z)).
%all x all y all z ((D(y, z@x) & U(x, y))  -> (y = (((x@x)@(x@x))@(x@x))@x)).

%LR1-C
%all x all y all z ((D(x, y) & U(y, z@x))  -> (x = z)).
%all x all y all z ((D(x, y) & U(y, z@x))  -> (y = (((x@x)@(x@x))@(x@x))@x)).

%LR1-D
%all x all y all z ((D(x*z, y) & U(y, z))  -> (x = z)).
%all x all y all z ((D(x*z, y) & U(y, z))  -> (y = (((x*x)*(x*x))*(x*x))*x)).

% --------------------------------------------
% Predicate Axioms
%all x (D((((x*x)*(x*x))*(x*x))*x, x)).
%B
%all x (U(x,((((x@x)@(x@x))@(x@x))@x))). 
%all x (D(negpow (x), x@x)).

%C
%all x (D(x,((((x@x)@(x@x))@(x@x))@x))). 
%all x (U(((((x@x)@(x@x))@(x@x))@x), x@x)).

%D
%all x (D(x*x,((((x*x)*(x*x))*(x*x))*x))). 
%all x (U((((x*x)*(x*x))*(x*x))*x, x)).

end_of_list.

