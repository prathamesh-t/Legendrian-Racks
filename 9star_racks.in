% Saved by Prover9-Mace4 Version 0.5, December 2007.

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  assign(max_weight, 25).
  set(restrict_denials).
  assign(new_constants, 1).
  assign(max_seconds, 60).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

formulas(assumptions).

% Distributivity from a nonstandard Boolean algebra (BA) basis.

% Prover9 should produce a proof in a few seconds.

% Nonstandard Boolean algebra basis.
% Rack Axioms

all x all y all z ((x*y)*z = (x*z)*(y*z)).
all x all y ((x@y) * y = x).
all x all y ((x*y)@y = x).

%Predicate Axioms
%all x (U(x*x,(x*x)*(x*x))). 
%all x (D((x*x)*(x*x), x)).

%all x (U(x*x,((((x*x)*(x*x))*(x*x))*(x*x))*x)). 
%all x (D(((((x*x)*(x*x))*(x*x))*(x*x))*x, x)).
%B
%all x (U(x,(((((x@x)@(x@x))@(x@x))@(x@x))@x))). 
%all x (D((((((x@x)@(x@x))@(x@x))@(x@x))@x, x@x))).

%C
%all x (D(x,(((((x@x)@(x@x))@(x@x))@(x@x))@x))). 
%all x (U((((((x@x)@(x@x))@(x@x))@(x@x))@x), x@x)).

%D
%all x (D(x*x,(((((x*x)*(x*x))*(x*x))*(x*x))*x))). 
%all x (U(((((x*x)*(x*x))*(x*x))*(x*x))*x, x)).
%Reidemeister Axioms
%Move 1
%A
all x all y all z ((U(x*z, y) & D(y, z))  -> (x = z)).
all x all y all z ((U(x*z, y) & D(y, z))  -> (y = ((((x*x)*(x*x))*(x*x))*(x*x))*x)).
%B
all x all y all z ((D(y, z@x) & U(x, y))  -> (x = z)).
all x all y all z ((D(y, z@x) & U(x, y))  -> (y = ((((x@x)@(x@x))@(x@x))@(x@x))@x)).

%C

all x all y all z ((D(x, y) & U(y, z@x))  -> (x = z)).
all x all y all z ((D(x, y) & U(y, z@x))  -> (y = ((((x@x)@(x@x))@(x@x))@(x@x))@x)).

%D

all x all y all z ((D(x*z, y) & U(y, z))  -> (x = z)).
all x all y all z ((D(x*z, y) & U(y, z))  -> (y = ((((x*x)*(x*x))*(x*x))*(x*x))*x)).

%Move 2
%A
all x all y all z (U(x,y) -> U(x*z, y*z)).
%A-Inverse
all x all y all z (U(x,y) -> U(x@z, y@z)).

%B
all x all y all z (D(x,y) -> D(x*z, y*z)).
%B-Inverse
all x all y all z (D(x,y) -> D(x@z, y@z)).

%C
all x all y all z (U(x, y) -> (z@x)*y = z).

%C-Inverse
all x all y all z (U(x, y) -> (z@y)*x = z).

%D
all x all y all z (D(x,y) -> (z*y)@x = z). 

%D-Inverse
all x all y all z (D(x, y) -> (z*x)@y = z).
%assumption.
U(a_1,a_2).
U(a_2,a_3).
U(a_3,a_4).
D(a_4,a_5).
D(a_5,a_6).
%U(a_6,a_7).
%U(a_7,a_8).
%U(a_8,a_9).
%U(a_9,a_10).
%U(a_10,a_11).
%U(a_11,a_12).
%U(a_12,a_13).
%U(a_13,a_14).
%U(a_14,a_15).
%U(a_15,a_16).
%U(a_16,a_17).
%U(a_17,a_18).
D(a_6,a_1).

end_of_list.

formulas(goals).

((((x*x)*(x*x))*(x*x))*(x*x))*x = (((((x*x)*x)*x)*x)*x).

end_of_list.

